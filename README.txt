1. DESCRIPTION - Our first step is pulling technical and fundamental data from Yahoo Finance API (update_stock_data.py) for all companies listed in the S&P 500 (last updated 12/5/2021). Our team stored technical and fundamental stock data for S&P 500 companies using SQL, in a database (stock_data_500.db) of about 260 MB. We used a Flask app (hello_stock_data_500.py) to connect to the stock_data_500 database and serve data in a useable form (JSON) for D3 visualizations.
The visualization component of our project (example.html) has three sections and a stock ticker search bar. The first section is a fundamental data visualization tool that displays different fundamental variables (Revenue, Earnings, R&D Costs, Income Before Taxes) over several years. The second section is a technical data visualization tool that displays technical variables (Close_Price, MACD, Diff_MACD, Signal, RSI, EMA_9Day) over several years. Users can alter which variables are displayed using drop-down menus next to each section. The last section displays the results from our stock analysis, our group used machine learning techniques to identify the ten best S&P 500 stocks to purchase.
For the analysis component of the project, our team compared different classification models and found that logistic regression and support vector classification performed about the same while KNN performed slightly worse (Final_Notebook.ipynb). Our team decided that a logistic regression classification model would be the best choice. Our team defined successful stock purchases as stocks with positive returns 10 days after closing (analysis run on 12/5/2021) we converted this to a binary variable and used it as our model's response. After testing several different combinations of training variables our team found that RSI, Debt to Equity, and Price/Revenue Ratio were most effective in determining the likelihood of whether a particular stock purchase is profitable. We passed a sorted table of response variables and ticker symbols to the stock database. This table is used in section 3 (top ten stocks to buy) of our HTML visualization.
In addition to our code (find above files in CODE folder) this zip folder also includes our team017report (report write-up) and our team017poster (final poster) in the DOC folder.

2. INSTALLATION - Users will need python version 3.7 or later, access to Jupyter Notebooks software, and the following libraries: warnings, pandas, yfinance, sqlite3, csv, Flask (from flask), request (from flask), g (from flask), CORS (from flask_cors), yahooquery, statsmodels, and sklearn to run our visualization. Users will also need a web browser (Google Chrome recommended) for displaying the HTML visualization. After downloading all necessary libraries/browsers/python and unzipping the project folder proceed to section 3. EXECUTION for instructions on how to run a demo.

3. EXECUTION - (Step 0) [Optional] Open and run (set GET_NEW_DATA = True) the update_stock_data.py script to pull up to date technical/fundamental data for each stock in the S&P 500 into the database. Note this step is optional, Yahoo Finance may throttle requests causing this script to take a long time to run. Users who choose not to run the script can use a pre-populated database (stock_data_500.db). We recommend proceeding directly to step one using the pre-populated database. (Step 1) Open and run the flask app (hello_stock_data_500.py). (Step 2) Open (double click) the HTML file (example.html) which, brings users to the browser visualization. (Step 3) Users can change which S&P 500 stock they want to see using the search bar (e.g., search "AAPL" for Apple) and change specific technical or fundamental data visualizations using the drop-down menus. We implemented a tool tip in the fundamental data section to show exact dollar values for each year.

4. [Optional, but recommended] DEMO VIDEO - https://youtu.be/8ds7bt18824